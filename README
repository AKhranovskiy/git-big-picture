Program Description
===================

Git-big-picture is a visualization for Git repositories. You can think of it as
a filter that removes uninteresting commits from a DAG modelling a Git
repository and thereby exposes the big picture: the hierarchy of tags and
branches.

Dependencies
============

* Python 2.6 (2.5 will not work, 2.7 may work)
* Git (1.7.1 works)
* Graphviz utility
* Nosetest (only for running tests)

Installation
============

Just run it straight from a clone or download:

    $ git clone http://git.goodpoint.de/?p=git-big-picture.git;a=summary
    $ cd git-big-picture
    $ ./git-big-picture --help

Alternatively, use the standard 'setup.py' script to install it system wide.

    $ ./setup.py install
    (may need root privileges)

Internals
=========

The graph operations are written in Python and output the graph-data in the
easy-to-write Graphviz syntax. This is converted into an image using the
Graphviz 'dot' utility. Graphviz supports a multitude of image formats, e.g. SVG
and PDF. Check that Graphviz is installed by invoking: 'dot -V'.

Usage Examples
==============

Generate PNG version of current Git repository and save to 'our-project.png':

    $ ./git-big-picture -f png -o our-project.png

Generate SVG graph of the repository in ~/git-repo and view the result in Firefox:

    $ ./git-big-picture -f svg -v firefox ~/git-repo/

Manually pipe the Graphviz commands to the 'dot' utility:

    $ ./git-big-picture ~/git-repository | dot -Tpng -o graph.png

Without options, the script has a simple plaintext output mode which
is understood by 'dot'. For further information see `man dot'

If you specify a custom format, but neither a viewer nor an output
file, the script will output the image to stdout. That is to enable
you to use it in shell scripts and pipe the result (for example a
gzipped SVG version) to another program.

Git Integration
===============

You can easily integrate this script as a regular Git command, by making the
script 'git-big-picture' available on the $PATH. For instance: using './setup.py
install' method as described above should do the trick. Alternatively symlink
'git-big-picture' into a directory listed in your $PATH, for example $HOME/bin.

You may then use 'git big-picture' as you would any other Git command:

    $ git big-picture -f pdf -v xpdf -o visualization.pdf

This will present you with a PDF viewer displaying your project's
graph, and stores this PDF in a file called `visualization.pdf'.

Testing
=======

Just run:

    $ ./setup.py test

Or alternatively use 'nosetest' directly:

    $ nosetest

License
=======

Licensed under GPL v3 or later, see file COPYING for details.

Authors/Contributors
====================

Sebastian Pipping  <sebastian@pipping.org>
Julius Plenz       <julius@plenz.com>
Valentin Haenel    <valentin.haenel@gmx.de>
Yaroslav Halchenko <debian@onerussian.com>

