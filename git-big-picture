#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is part of git-big-picture
#
# Copyright (C) 2010    Sebastian Pipping <sebastian@pipping.org>
# Copyright (C) 2010    Julius Plenz <julius@plenz.com>
# Copyright (C) 2010-11 Valentin Haenel <valentin.haenel@gmx.de>
# Copyright (C) 2011    Yaroslav Halchenko <debian@onerussian.com>
#
# git-big-picture is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# git-big-piture is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with git-big-picture.  If not, see <http://www.gnu.org/licenses/>.

import sys, os
from optparse import OptionParser
import subprocess
from git_big_picture.main import VERSION, CommitGraph, _process_dot_output
import git_big_picture.git_tools as gt


_USAGE = '\n  %prog  [-f <format> [-v <viewer>]] [-o <outfile>] [<repo-directory>]'

parser = OptionParser(usage=_USAGE, version=VERSION)

parser.add_option('-a', '--all', action='store_true', dest='all_commits',
	help='include all commits (not just tags and branch heads)')
parser.add_option('--some', action='store_true', dest='some_commits',
	help='include all commits but linear runs')
parser.add_option('-f', '--format', action='store', type='string', dest='format',
	metavar='FMT', help='set output format [svg, png, ps, pdf, ...]')
parser.add_option('-o', '--out', action='store', type='string', dest='outfile',
	metavar='FILE', help='write image to specified file')
parser.add_option('-v', '--viewer', action='store', type='string', dest='viewer',
	metavar='CMD', help='write image to tempfile and start specified viewer')
parser.add_option('--pstats', action='store', type='string', dest='pstats_outfile',
	metavar='FILE', help='run cProfile profiler writing pstats output to FILE')

opts, args = parser.parse_args()


if len(args) > 1:
	parser.print_usage()
	sys.exit(1)
elif len(args) == 1:
	repodir = args[0]
else:
	repodir = os.getcwd()

git_dir = gt.get_command_output(['git','rev-parse', '--git-dir'],
		                       cwd=repodir).rstrip()

if not git_dir.startswith(os.path.sep):
	# Prepend full path if we got relative one
	git_dir = os.path.join(repodir, git_dir)

git_env = {'GIT_DIR': git_dir}


	# cases: total: 11
	# no output args -> print graphviz
	# format only -> print dot output
	# viewer only -> use default format
	# outfile -> put graphviz to file, use extension
	# format + viewer -> use format and viewer
	# format and outfile -> save image, get extension from format
	# format and viewer -> generate outfile, use default extension, open in # viewer
	# format, outfile, and viewer -> start viewer on outputfile

def main(opts, git_dir):
	gt.git_env = git_dir
	(lb, rb, ab), (tags, ctags, nctags) = gt.get_mappings()
	graph = CommitGraph(gt.get_parent_map(), ab, tags)
	# graph._optimize_linear_runs_away()
	# graph._optimize_merge_branch_fits_away()
	# graph._optimize_non_labels()
	if opts.all_commits:
		sha_one_digits = graph._minimal_sha_one_digits()
	elif opts.some_commits:
		sha_one_digits = graph._minimal_sha_one_digits()
		graph._remove_linear_runs()
	else:
		sha_one_digits = None
		graph._remove_non_labels()

	dot_file_lines = graph._generate_dot_file(sha_ones_on_labels=opts.all_commits, sha_one_digits=sha_one_digits)
	_process_dot_output(dot_file_lines, format=opts.format, viewer=opts.viewer, outfile=opts.outfile)

if opts.pstats_outfile is not None:
	import cProfile
	cProfile.run('main(opts, git_env)', opts.pstats_outfile)
else:
	main(opts, git_env)
# vim: set noexpandtab:
