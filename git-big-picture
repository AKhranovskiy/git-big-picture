#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is part of git-big-picture
#
# Copyright (C) 2010    Sebastian Pipping <sebastian@pipping.org>
# Copyright (C) 2010    Julius Plenz <julius@plenz.com>
# Copyright (C) 2010-11 Valentin Haenel <valentin.haenel@gmx.de>
# Copyright (C) 2011    Yaroslav Halchenko <debian@onerussian.com>
#
# git-big-picture is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# git-big-piture is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with git-big-picture.  If not, see <http://www.gnu.org/licenses/>.

import sys, os
from optparse import OptionParser
import subprocess
from git_big_picture.main import VERSION, main


_USAGE = '\n  %prog  [-f <format> [-v <viewer>]]  [<repo-directory>]'

parser = OptionParser(usage=_USAGE, version=VERSION)

parser.add_option('-a', '--all', action='store_true', dest='all_commits',
	help='include all commits (not just tags and branch heads)')
parser.add_option('--some', action='store_true', dest='some_commits',
	help='include all commits but linear runs')
parser.add_option('-f', '--format', action='store', type='string', dest='format',
	metavar='FMT', help='set output format [svg, png, ps, pdf, ...]')
parser.add_option('-o', '--out', action='store', type='string', dest='outfile',
	metavar='FILE', help='write image to specified file')
parser.add_option('-v', '--viewer', action='store', type='string', dest='viewer',
	metavar='CMD', help='write image to tempfile and start specified viewer')
parser.add_option('--pstats', action='store', type='string', dest='pstats_outfile',
	metavar='FILE', help='run cProfile profiler writing pstats output to FILE')

opts, args = parser.parse_args()


if len(args) > 1:
	parser.print_usage()
	sys.exit(1)
elif len(args) == 1:
	repodir = args[0]
else:
	repodir = os.getcwd()

# Figure out the corresponding GIT_DIR
p = subprocess.Popen(['git', 'rev-parse', '--git-dir'],
					 stdout=subprocess.PIPE, stderr=subprocess.PIPE,
					 cwd=repodir)

p.wait()
pout = p.stdout.readlines()

if not len(pout):
	sys.stderr.write("Fatal: Cannot determine the GIT_DIR path for %s" % repodir)
	sys.exit(1)

git_dir = pout[0].rstrip()
if not git_dir.startswith(os.path.sep):
	# Prepend full path if we got relative one
	git_dir = os.path.join(repodir, git_dir)
git_env = {'GIT_DIR': git_dir}

if opts.pstats_outfile is not None:
	import cProfile
	cProfile.run('main(opts)', opts.pstats_outfile)
else:
	main(opts, git_env)


# vim: set noexpandtab:
